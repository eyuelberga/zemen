(() => {
  var __defineProperty = Object.defineProperty;
  var __commonJS = (callback, module) => () => {
    if (!module) {
      module = {exports: {}};
      callback(module.exports, module);
    }
    return module.exports;
  };
  var __markAsModule = (target) => {
    return __defineProperty(target, "__esModule", {value: true});
  };
  var __export = (target, all) => {
    __markAsModule(target);
    for (var name in all)
      __defineProperty(target, name, {get: all[name], enumerable: true});
  };

  // src/zemen.ts
  var require_zemen = __commonJS((exports) => {
    __export(exports, {
      toEE: () => toEE,
      toGC: () => toGC
    });
  });

  // src/core.ts
  const GEREGORIAN_EPOCH = 1;
  const ETHIOPIC_EPOCH = 2796;
  const COPTIC_EPOCH = 103605;
  function fixedFromCoptic({year, month, day}) {
    return COPTIC_EPOCH - 1 + 365 * (year - 1) + Math.floor(year / 4) + 30 * (month - 1) + day;
  }
  function copticFromFixed(date) {
    const year = Math.floor(1 / 1461 * (4 * (date - COPTIC_EPOCH) + 1463));
    const month = Math.floor(1 / 30 * (date - fixedFromCoptic({year, month: 1, day: 1}))) + 1;
    const day = date + 1 - fixedFromCoptic({year, month, day: 1});
    return {year, month, day};
  }
  function fixedFromEthiopic(ken) {
    return ETHIOPIC_EPOCH + fixedFromCoptic(ken) - COPTIC_EPOCH;
  }
  function ethiopicFromFixed(date) {
    return copticFromFixed(date + COPTIC_EPOCH - ETHIOPIC_EPOCH);
  }
  function isGeregorianLeapYear(year) {
    return year % 4 === 0 && ![100, 200, 300].includes(year % 400);
  }
  function fixedFromGeregorian({year, month, day}) {
    const step1 = GEREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100);
    const step2 = Math.floor((year - 1) / 400) + Math.floor(1 / 12 * (367 * month - 362));
    const step3 = (month < 2 ? 0 : isGeregorianLeapYear(year) ? -1 : -2) + day;
    return step1 + step2 + step3;
  }
  function gregorianNewYear(year) {
    return fixedFromGeregorian({year, month: 1, day: 1});
  }
  function geregorianYear(date) {
    const d0 = date - GEREGORIAN_EPOCH;
    const d1 = d0 % 146097;
    const d2 = d1 % 36524;
    const d3 = d2 % 1461;
    const n400 = Math.floor(d0 / 146097);
    const n100 = Math.floor(d1 / 36524);
    const n4 = Math.floor(d2 / 1461);
    const n1 = Math.floor(d3 / 365);
    const year = 400 * n400 + 100 * n100 + 4 * n4 + n1;
    return n100 === 4 || n1 === 4 ? year : year + 1;
  }
  function geregorianFromFixed(date) {
    const year = geregorianYear(date);
    const priorDays = date - gregorianNewYear(year);
    const correction = date < fixedFromGeregorian({year, month: 3, day: 1}) ? 0 : isGeregorianLeapYear(year) ? 1 : 2;
    const month = Math.floor(1 / 367 * (12 * (priorDays + correction) + 373));
    const day = date - fixedFromGeregorian({year, month, day: 1}) + 1;
    return {year, month, day};
  }

  // src/converting.ts
  function toGC(ken) {
    const rd = fixedFromEthiopic(ken);
    return geregorianFromFixed(rd);
  }
  function toEE(ken) {
    const rd = fixedFromGeregorian(ken);
    return ethiopicFromFixed(rd);
  }
  require_zemen();
})();
